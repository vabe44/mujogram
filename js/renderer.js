// Generated by CoffeeScript 1.8.0
(function() {
  var Renderer;

  Renderer = (function() {
    Renderer.prototype.BARS = 256;

    Renderer.prototype.runRenderer = true;

    Renderer.prototype.path = null;

    Renderer.prototype.hue = 42;

    Renderer.prototype.colorSat = 7;

    Renderer.prototype.colorAmp = 0.66;

    Renderer.prototype.colorInvert = false;

    Renderer.prototype.paintAmp = false;

    Renderer.prototype.paintBg = false;

    Renderer.prototype.changeHue = false;

    Renderer.prototype.smooth = true;

    Renderer.prototype.changeRadius = true;

    Renderer.prototype.baseRadius = -32;

    Renderer.prototype.radiusAmp = 1;

    Renderer.prototype.ampVal = 8;

    Renderer.prototype.xOffset = 1.5;

    Renderer.prototype.yOffset = 2;

    Renderer.prototype.baseAngle = 0;

    Renderer.prototype.changeAngle = true;

    Renderer.prototype.changeAngleSpeed = 0.0001618;

    Renderer.prototype.gapper = 1;

    Renderer.prototype.gapperDir = "up";

    Renderer.prototype.radiusDir = 'down';

    Renderer.prototype.hueDirection = "up";

    function Renderer() {
      this.freqByteData = new Uint8Array(Sounder.control.analyser.frequencyBinCount);
      this.initEvents();
      this.initPaper();
      this;
    }

    Renderer.prototype.initImage = function() {
      var image;
      image = 'img_' + Sounder.player.currentTrack;
      this.raster = new paper.Raster(image);
      this.raster.position = paper.view.center;
      this.raster.insertBelow(this.path);
      return this.maskPath = new paper.Path();
    };

    Renderer.prototype.initPaper = function() {
      this.GOLDEN = 1.618;
      this.PI = Math.PI;
      this.$CANVAS = $('canvas');
      paper.setup(this.$CANVAS[0]);
      this.bg = new paper.Rectangle(paper.view.bounds);
      paper.view.fillColor = 'rgb(255,255,233)';
      this.path = new paper.Path();
      this.path.closed = false;
      this.path.strokeColor = 'black';
      this.path.strokeWidth = 1;
      this.TOTALWIDTH = paper.view.size.width;
      this.TOTALHEIGHT = paper.view.size.height;
      this.xPos = this.TOTALWIDTH / this.xOffset;
      this.yPos = this.TOTALHEIGHT / this.yOffset;
      this.initPoints();
      return paper.view.draw();
    };

    Renderer.prototype.initPoints = function() {
      var i, point, x, y, _i, _ref, _ref1, _results;
      this.log = 0;
      _results = [];
      for (i = _i = 0, _ref = this.BARS, _ref1 = this.gapper; _ref1 > 0 ? _i < _ref : _i > _ref; i = _i += _ref1) {
        x = Math.floor(Math.cos(this.baseAngle * i) * this.baseRadius);
        y = Math.floor(Math.sin(this.baseAngle * i) * this.baseRadius);
        point = new paper.Point(this.xPos + x, this.yPos + y);
        _results.push(this.path.add(point));
      }
      return _results;
    };

    Renderer.prototype.updatePos = function() {
      var oldHeight;
      oldHeight = this.TOTALHEIGHT;
      this.TOTALWIDTH = paper.view.size.width;
      this.TOTALHEIGHT = paper.view.size.height;
      this.xPos = this.TOTALWIDTH / this.xOffset;
      return this.yPos = this.TOTALHEIGHT / this.yOffset;
    };

    Renderer.prototype.initEvents = function() {
      var debouncedresize;
      $(this).on('pause', (function(_this) {
        return function() {
          return _this.runRenderer = false;
        };
      })(this));
      $(this).on('start', (function(_this) {
        return function() {
          _this.runRenderer = false;
          _.delay((function() {
            _this.runRenderer = true;
            return _this.render();
          }), 100);
          if (Sounder.renderer.changeHue) {
            return _this.hueChanger();
          }
        };
      })(this));
      debouncedresize = _.debounce(((function(_this) {
        return function() {
          return _this.updatePos();
        };
      })(this)), 10);
      return $(window).resize((function(_this) {
        return function() {
          return debouncedresize();
        };
      })(this));
    };

    Renderer.prototype.signalEffects = function(signal) {
      var p;
      if (this.paintAmp) {
        p = signal * this.colorAmp;
        if (this.colorInvert) {
          p = 100 - p;
        }
        this.path.strokeColor = "hsl(" + this.hue + "," + this.colorSat + "%, " + p + "%)";
      }
      if (this.changeAngle) {
        this.baseAngle += this.changeAngleSpeed;
      }
      if (this.paintBg) {
        p = signal * this.colorAmp;
        if (!this.colorInvert) {
          p = 100 - p;
        }
        document.documentElement.style.backgroundColor = "hsl(" + this.hue + ",25%, " + p + "%)";
      }
      if (this.changeRadius) {
        return this.baseRadius = signal * this.radiusAmp;
      }
    };

    Renderer.prototype.shader = function(value) {
      var dot, i, magnitude, p, x, y, _i, _ref, _ref1;
      if (true === this.changeRadius || true === this.changeAngle || true === this.paintAmp || true === this.paintBg) {
        p = _.reduce(value, function(memo, num) {
          return memo + num;
        });
        p = Math.round(((p / 1024) / 255) * 100);
        this.signalEffects(p);
      }
      for (i = _i = 0, _ref = this.BARS, _ref1 = this.gapper; _ref1 > 0 ? _i < _ref : _i > _ref; i = _i += _ref1) {
        magnitude = value[i] * (this.GOLDEN * (this.ampVal / 10));
        x = Math.floor(Math.cos(this.baseAngle * i) * (this.baseRadius + magnitude) + this.xPos);
        y = Math.floor(Math.sin(this.baseAngle * i) * (this.baseRadius + magnitude) + this.yPos);
        dot = this.path.segments[(this.path.segments.length - 1) - i];
        dot.point.x = x;
        dot.point.y = y;
      }
      if (this.smooth) {
        this.path.smooth();
      }
      return paper.view.draw();
    };

    Renderer.prototype.hueChanger = function() {
      if (this.changer == null) {
        this.changer = _.throttle(((function(_this) {
          return function() {
            if (!!Sounder.renderer.changeHue) {
              console.log('hue');
              if (Sounder.renderer.hueDirection === "up") {
                Sounder.renderer.hue = Sounder.renderer.hue + 1;
              } else if (Sounder.renderer.hueDirection === "down") {
                Sounder.renderer.hue = Sounder.renderer.hue - 1;
              }
              if (Sounder.renderer.hue > 250) {
                Sounder.renderer.hueDirection = "down";
              } else if (Sounder.renderer.hue < 10) {
                Sounder.renderer.hueDirection = "up";
              }
              if (_this.radiusDir === 'up') {
                _this.radiusDir = 'down';
              } else if (_this.radiusDir === 'down') {
                _this.radiusDir = 'up';
              }
              return _this.changer();
            }
          };
        })(this)), 1000);
      }
      return this.changer();
    };

    Renderer.prototype.render = function() {
      if (Sounder.renderer.runRenderer) {
        window.requestAnimationFrame(Sounder.renderer.render);
        Sounder.control.analyser.getByteFrequencyData(Sounder.renderer.freqByteData);
        return Sounder.renderer.shader(Sounder.renderer.freqByteData);
      }
    };

    return Renderer;

  })();

  (function() {
    return Sounder.renderer = new Renderer;
  })();

}).call(this);
